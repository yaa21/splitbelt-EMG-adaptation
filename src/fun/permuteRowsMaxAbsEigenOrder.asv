function [B,rowPermutation] = permuteRowsMaxAbsEigenOrder(W)
%Permutes row such that the (1,1) element is the highest it can be, then
%the (2,2) element is the highest it can be leaving (1,1) fixed, and so on.

%W needs to be a square matrix
D=size(W,1);
rowPermutation=nan(1,D);
B=W;
blockedRows=zeros(D,1);
blockedColumns=zeros(D,1);
for iter=1:D
    BB=W;
    BB(blockedRows==1,:)=0;
    BB(:,blockedColumns==1)=0;
    %Find the max element:
    if max(abs(BB(:)))>0
        [ii,jj]=find(abs(BB)==max(abs(BB(:))));
        rowPermutation(jj)=ii;
        blockedRows(ii)=1;
        blockedColumns(jj)=1;
        
    end
end
rowPermutation(isnan(rowPermutation))=find(isnan(rowPermutation));
B=W(rowPermutation,:);
[B1,rowPermutation1] = permuteRowsMaxAbsEigenOrder(B);
if any(rowPermutation1~=1:D)
    error('Mis-permutation')
end

end